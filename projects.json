{
  "projects" : [
    {
      "name": "Chatterbox",
      "group": true,
      "display": true,
      "tech": "Express.js, Node.js, JavaScript, PostgreSQL, React, Redux, Redux Thunk, Socket.IO, and Sequelize",
      "details": [
        "Contributed to a full-stack, real-time, event-based web messenger application built with Socket.IO",
        "Created React components to render information pertaining to authorized user conversations and managed state using React Redux and Redux Thunk to optimize performance",
        "Improved the efficiency of retrieving PostgreSQL data by minimizing requests to the server, in addition to closing security vulnerabilities"
      ],
      "github": ["https://github.com/LouisaJohnston/Chatterbox"],
      "deployed": "https://chatterbox-messenger.herokuapp.com/",
      "images": [       
        "/chat/login.png",
        "/chat/fivemessages.png",
        "/chat/allmessages.png",
        "/chat/messageseen.png"]
    }, 
    {
      "name": "Flick Picks",
      "display": true,
      "group": false,
      "tech": "CSS3, EJS, Express.js, Node.js, PostgreSQL, JavaScript, and Sequelize",
      "details": [
        "Created a web app using node.js and Express.js that allowed users to create an account or login with encrypted cookie storage and password hashing",
        "Applied EJS templates and Axios to render information from a third-party film API and allow users to save movies to user-specific lists",
        "Saved user inputs (login information and movie comments/reviews) as database information fields through PostgreSQL, with full CRUD functionality"
      ],
      "github": ["https://github.com/LouisaJohnston/Flick_Picks"],
      "deployed": "https://flickpicks-project2.herokuapp.com/",
      "images": [        
        "/flick/Home.png",
        "/flick/SearchResults.png",
        "/flick/WatchlistAfter.png",
        "/flick/WatchlistDetails.png"
    ]}, 
    {
      "name": "Bot Noggle",
      "display": true,
      "group": false,
      "tech": "Pygame, Python",
      "details": [
        "Built a version of Boggle using Python and Pygame to render a 4x4 grid out of a two-dimensional array of randomized letters corresponding to the real Boggle dice",
        "Allowed users to check whether a given word exists in adjacent grid tiles (up, down, diagonally, forwards, and backwards)",
        "Inserted dictionary information into a trie data structure to check against user input while optimizing the projectâ€™s time complexity"
      ],
      "github": ["https://github.com/LouisaJohnston/botNoggle"],
      "deployed": "https://www.youtube.com/watch?v=MCWT7-8a7iE&ab_channel=LouisaJohnston",
      "images": ["/bot/gameplay.png"]
    },
    {
      "name": "Word-cross'd Puzzler",
      "display": true,
      "group": false,
      "tech": "CSS3, HTML5, and JavaScript",
      "details": [
        "Designed a grid-based 5x5 puzzle to run in-browser for desktop computers",
        "Utilized CSS3 and HTML5 properties to approximate the experience of a pen-and-paper puzzle with front-end styling considerations implemented through Flexbox",
        "Developed functionality to show time elapsed, toggle between vertical and horizontal input focus flow, check answers, puzzle reveal, and game restart through DOM event listeners"
      ],
      "github": ["https://github.com/LouisaJohnston/Word-crossd_Puzzler"],
      "deployed": "https://louisajohnston.github.io/",
      "images": [       
        "/puzzler/initial.png",
        "/puzzler/check.png",
        "/puzzler/instructions.png",
        "/puzzler/winstate.png"]
    },
    {
      "name": "Paw-tel",
      "display": true,
      "group": true,
      "tech": "CSS3, HTML5, JavaScript, MERN auth, MongoDB, Mongoose, and React",
      "details": [
        "Collaborated on a full-stack MERN app using complex authorization routes allowing users to register as either a pet owner or a pet hotel owner",
        "Employed React components to render information from a local API pertaining to user-specific pets or hotels, depending on the authorization route, with the ability to update and delete data fields",
        "Stored user input through a server-side Mongoose database using MongoDB"
      ],
      "github": ["https://github.com/LouisaJohnston/Paw-tel", "https://github.com/LouisaJohnston/pawtel-client"],
      "deployed": "https://pawtel-application.herokuapp.com/",
        "images": [        
        "/pawtel/homepage.png",
        "/pawtel/petpage.png",
        "/pawtel/register.png"
    ]},
    {
      "name": "Generate Good",
      "display": false,
      "group": false,
      "tech": "C#, JavaScript, Next.js, MySQL, React, Sequelize, and TypeScript",
      "details": [],
      "github": [],
      "deployed": "",
      "images": []
    },
    {
      "name": "Portfolio",
      "display": false,
      "group": false,
      "tech": "Next.js, React, JavaScript, HTML5, and CSS3",
      "details": [],
      "github": [],
      "deployed": "",
      "images": []
    }
  ]
}